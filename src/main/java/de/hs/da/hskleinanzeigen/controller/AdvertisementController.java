package de.hs.da.hskleinanzeigen.controller;

import de.hs.da.hskleinanzeigen.domain.AD;
import de.hs.da.hskleinanzeigen.domain.Category;
import de.hs.da.hskleinanzeigen.domain.NotFoundException;
import de.hs.da.hskleinanzeigen.repository.AdvertisementRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Optional;

@RestController
public class AdvertisementController{
    // This means to get the bean called Repository Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private AdvertisementRepository advertisementRepository;
    @Autowired
    private CategoryController categoryController;

    @PostMapping(path="/api/advertisements") // Map ONLY POST Requests
    @ResponseBody
    public AD addNewAdvertisement (@RequestBody AD advertisement) {
        // @ResponseBody means the returned String is the response, not a view name
        if(categoryController.getCategoryByID(advertisement.getCategory().getId()).isEmpty()){
            throw new NotFoundException("Category with the id: "+advertisement.getCategory().getId()+" is not found");
        }
        Category category = categoryController.getCategoryByID(advertisement.getCategory().getId()).get();
        advertisement.setCategory(category);
        return advertisementRepository.save(advertisement);
    }

    @GetMapping("/api/advertisements/{id}")
    public Optional<AD> getAdvertisementByID(@PathVariable int id) {
        Optional<AD> advertisement = advertisementRepository.findById(id);
        if(advertisement.isEmpty()){
            throw new NotFoundException("Advertisement with the id: "+id+" is not found");
        }
        return advertisementRepository.findById(id);
    }

    @GetMapping(path="/api/advertisements/all")
    @ResponseBody
    public List<AD> getAllAdvertisement() {
        // This returns a JSON or XML with the advertisement
        return advertisementRepository.findAll();
    }
}
