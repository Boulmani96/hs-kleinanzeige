package de.hs.da.hskleinanzeigen.controller;

import de.hs.da.hskleinanzeigen.DTOs.AdDTO;
import de.hs.da.hskleinanzeigen.DTOs.CategoryDTO;
import de.hs.da.hskleinanzeigen.DTOs.CreationAdDTO;
import de.hs.da.hskleinanzeigen.DTOs.UserDTO;
import de.hs.da.hskleinanzeigen.domain.AD;
import de.hs.da.hskleinanzeigen.domain.Type;
import de.hs.da.hskleinanzeigen.mappers.AdvertisementMapper;
import de.hs.da.hskleinanzeigen.repository.AdvertisementRepository;
import org.mapstruct.factory.Mappers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
public class AdvertisementController{
    // This means to get the bean called Repository Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private AdvertisementRepository advertisementRepository;

    @Autowired
    private CategoryController categoryController;

    @Autowired
    private UserController userController;

    @Autowired
    private AdvertisementMapper advertisementMapper = Mappers.getMapper(AdvertisementMapper.class);

    @PostMapping(path="/api/advertisements") // Map ONLY POST Requests
    @ResponseBody
    public ResponseEntity<AdDTO> addNewAdvertisement (@RequestBody CreationAdDTO creationAdDTO) {
        if(creationAdDTO.getType() == null || creationAdDTO.getCategory() == null
                || creationAdDTO.getCategory().getId() == null || creationAdDTO.getTitle() == null
                || creationAdDTO.getDescription() == null || creationAdDTO.getUser() == null
                || creationAdDTO.getUser().getId() == null ){
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
        // If Category does not exist
        if(categoryController.getCategoryByID(creationAdDTO.getCategory().getId()) == null){
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        // If user does not exist
        if(!userController.getUserByID(creationAdDTO.getUser().getId()).hasBody()){
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        CategoryDTO categoryDTO = categoryController.getCategoryByID(creationAdDTO.getCategory().getId()).getBody();
        UserDTO userDTO = userController.getUserByID(creationAdDTO.getUser().getId()).getBody();

        creationAdDTO.setCategory(categoryDTO);
        creationAdDTO.setUser(userDTO);
        AD advertisement = advertisementMapper.creationAdDTOtoAd(creationAdDTO);
        advertisementRepository.save(advertisement);
        return new ResponseEntity<>(advertisementMapper.adToAdDTO(advertisement), HttpStatus.CREATED);
    }

    @GetMapping("/api/advertisements/{id}")
    public ResponseEntity<AdDTO> getAdvertisementById(@PathVariable int id) {
        Optional<AD> advertisement = advertisementRepository.findById(id);
        // The advertisement does not found
        if(advertisement.isEmpty()){
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(advertisementMapper.adToAdDTO(advertisement.get()), HttpStatus.OK);
    }

    @GetMapping(path="/api/advertisements")
    @ResponseBody
    public ResponseEntity<Page> getAdvertisements(@RequestParam(required = false) Type type, @RequestParam(required = false , defaultValue = "-1") int category, @RequestParam(required = false , defaultValue = "-1") int priceFrom, @RequestParam(required = false, defaultValue = "-1") int priceTo, @RequestParam(defaultValue = "-1") int pageStart, @RequestParam(defaultValue = "-1") int pageSize) {
        if(pageSize < 0 || pageStart < 0){
            return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
        }

        PageRequest pr = PageRequest.of(pageStart, pageSize);
        List<AD> filteredList = advertisementRepository.findAll();

        if(type != null){
            List<AD> filterType = advertisementRepository.findByType(type,pr);
            filteredList.retainAll(filterType);
        }

        if(category != -1){
            List<AD> filterCategory = advertisementRepository.findByCategory_id(category,pr);
            filteredList.retainAll(filterCategory);
        }

        if(priceFrom != -1 && priceTo != -1){
            List<AD> filterPriceFromTo = advertisementRepository.findByPriceFromTo(priceFrom,priceTo,pr);
            filteredList.retainAll(filterPriceFromTo);
        }

        if (filteredList.isEmpty()) {
            return new ResponseEntity<>(null, HttpStatus.NO_CONTENT);
        }

        Page<AdDTO> page = new PageImpl<>(advertisementMapper.listAdToAdDTO(filteredList));
        return new ResponseEntity<>(page, HttpStatus.OK);
    }
}
